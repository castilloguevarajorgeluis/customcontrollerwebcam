sap.ui.define([
	"jquery.sap.global",
	"sap/ui/core/Control",
	"sap/ui/core/CSSSize",
	"sap/ui/model/type/String",
	"sap/ui/model/type/Boolean",
	"sap/m/Button",
	"sap/m/MessageBox"
], function (jQuery, Control, CSSSize, String, Boolean, Button, MessageBox) {
	"use strict";
	var CControl;
	CControl = Control.extend("ynstestcamera.ywatestcamera.personalcontroller.Camera", {

		metadata: {
			//This code was generated by the layout editor.
			properties: {
				/**
				 *@Width of the video capture window in pixels
				 */
				videoWidth: {
					type: "sap.ui.core.CSSSize"
				},
				/**
				 *@Height of the video capture window in pixels
				 */
				videoHeight: {
					type: "sap.ui.core.CSSSize"
				},
				/**
				 *@Attribute display camera
				 */
				display: {
					type: "sap.ui.model.type.Boolean",
					defaultValue: false
				},
				/**
				 *@Attribute display buttons camera
				 */
				urlvideo: {
					type: "sap.ui.model.type.String"
				},
				/**
				 *@Attribute display buttons camera
				 */
				deviceId: {
					type: "sap.ui.model.type.String",
					defaultValue: ""
				}
			},

			aggregations: {
				/*buttonCaptureMode: {
					type: "sap.m.Button",
					multiple: false
				},*/
				buttonAccessCamera: {
					type: "sap.m.Button",
					multiple: false
				},
				buttonTakePicture: {
					type: "sap.m.Button",
					multiple: false
				},
				buttonRecord: {
					type: "sap.m.Button",
					multiple: false
				},
				buttonStopRecord: {
					type: "sap.m.Button",
					multiple: false
				}
			},
			
			events: {
				/**
				 * @Raised when the user clicks/taps the video preview. 
				 * The event object contain a parameter called "image" 
				 * which contains a base64 encoded png file. 
				 * This is a string.
				 */
				snapshot: {
				},
				
				changedisplay: {
					parameters: {
						display: {
							type: "sap.ui.model.type.Boolean"
						}
					}
				}/*,	
				
				changecapturemode: {
					parameters: {
						capturemode: {
							type: "sap.ui.model.type.String"
						}
					}
				}*/
			}
		},
		
		/**
		 * Called when a controller is instantiated and its View controls (if available) are already created.
		 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
		 * @memberOf ynstestcamera.ywatestcamera.personalcontroller.Camera
		 */
		init: function () {
			//This code was generated by the layout editor.
			this.oVideo = this._getVideo();
			this._displayingVideo = false; // Is the control displaying video at the moment?
			this.aDevices = [];
			/*this.setAggregation("buttonCaptureMode", new Button({
				text: "{i18n>textButtonCaptureModeSingleShot}",
				icon: "sap-icon://BusinessSuiteInAppSymbols/icon-input",
				press: this._onSubmitCaptureMode.bind(this)
			}).addStyleClass("sapUiNoMargin"));*/
			this.setAggregation("buttonAccessCamera", new Button({
				text: "{i18n>textButtonStartCamera}",
				icon: "sap-icon://log",
				press: this._onSubmitAccessCamera.bind(this)
			}).addStyleClass("sapUiNoMargin"));
			this.setAggregation("buttonTakePicture", new Button({
				text: "{i18n>textButtonCamera}",
				enabled: false,
				icon: "sap-icon://add-photo",
				//press: this._onMouseUpTakePicture.bind(this)
				press: this._onSubmitTakePicture.bind(this)
			}).addStyleClass("sapUiNoMargin"));
			this.setAggregation("buttonRecord", new Button({
				text: "{i18n>textButtonStartRecord}",
				enabled: false,
				icon: "sap-icon://record",
				press: this._onSubmitRecord.bind(this)
			}).addStyleClass("sapUiNoMargin"));
			this.setAggregation("buttonStopRecord", new Button({
				text: "{i18n>textButtonStoptRecord}",
				visible: false,
				enabled: false,
				icon: "sap-icon://stop",
				press: this._onSubmitStopRecord.bind(this)
			}).addStyleClass("sapUiNoMargin"));
			/*this.getAggregation("buttonTakePicture").attachBrowserEvent("mousedown", 
				this._onSubmitTakePicture.bind(this));*/
		},
		
		/*_onSubmitCaptureMode: function (oEvent) {
			//This code was generated by the layout editor.
			var oi18n = this.getModel("i18n").getResourceBundle();
			var oButton = this.getAggregation("buttonCaptureMode");
			switch (oButton.getText()) {
				case oi18n.getText("textButtonCaptureModeSingleShot"):
					oButton.setText(oi18n.getText("textButtonCaptureModeBurst"));
					this.setCapturemode("Burst Mode");
					break;
				case oi18n.getText("textButtonCaptureModeBurst"):
					oButton.setText(oi18n.getText("textButtonCaptureModeSingleShot"));
					this.setCapturemode("Single Shot");
					break;
				default:
					oButton.setText(oi18n.getText("textButtonCaptureModeSingleShot"));
					this.setCapturemode("Single Shot");
					break;
			}
			this._onStopCamera();
			this.fireEvent("changecapturemode", {
				capturemode: this.getCapturemode()
			});
		},*/
		
		/**
		 *@memberOf ynstestcamera.ywatestcamera.personalcontroller.Camera
		 * @param {object} oEvent for
		 */
		_onSubmitAccessCamera: function (oEvent) {
			//This code was generated by the layout editor.
			var oi18n		= this.getModel("i18n").getResourceBundle();
			var oButton 	= this.getAggregation("buttonAccessCamera");
			var oButton2	= this.getAggregation("buttonTakePicture");
			var oButton3	= this.getAggregation("buttonRecord");
			var oButton4	= this.getAggregation("buttonStopRecord");
			oButton3.setIcon("sap-icon://record");
			oButton3.setText(oi18n.getText("textButtonStartRecord"));
			switch (oButton.getText()) {
				case oi18n.getText("textButtonStartCamera"):
					oButton.setText(oi18n.getText("textButtonStopCamera"));
					this.setDisplay(true);
					oButton2.setEnabled(true);
					oButton3.setEnabled(true);
					oButton4.setVisible(true);
					oButton4.setEnabled(false);
					break;
				case oi18n.getText("textButtonStopCamera"):
					oButton.setText(oi18n.getText("textButtonStartCamera"));
					this._onStopCamera();
					this.setDisplay(false);
					oButton2.setEnabled(false);
					oButton3.setEnabled(false);
					oButton4.setVisible(false);
					oButton4.setEnabled(false);
					break;
				default:
					oButton.setText(oi18n.getText("textButtonStartCamera"));
					this._onStopCamera();
					this.setDisplay(false);
					oButton2.setEnabled(false);
					oButton3.setEnabled(false);
					oButton4.setVisible(true);
					oButton4.setEnabled(false);
					break;
			}
		},
		
		/**
		 *@memberOf ynstestcamera.ywatestcamera.personalcontroller.Camera
		 * @param {object} oEvent for
		 */
		_onSubmitTakePicture: function (oEvent) {
			//This code was generated by the layout editor.
			var oCanvas = this._getCanvas();
			var oVideo = this._getVideo();
			if (oVideo.videoWidth && oVideo.videoWidth !== 0) {
				this.setVideoWidth(oVideo.videoWidth + "px");
			}
			if (oVideo.videoHeight && oVideo.videoWidth !== 0) {
				this.setVideoHeight(oVideo.videoHeight + "px");
			}
			var iVideoWidth		= oCanvas.width;
			var iVideoHeight	= oCanvas.height;
			if (this.getDisplay()) {
				oCanvas.width = parseInt(this.getVideoWidth(), 10);
				oCanvas.height = parseInt(this.getVideoHeight(), 10);
				var context = oCanvas.getContext("2d");
				if (iVideoWidth && iVideoHeight) {
					context.drawImage(oVideo, 0, 0, parseInt(this.getVideoWidth(), 10), parseInt(this.getVideoHeight(), 10));
					// Pendiente en el controlador
					this.fireSnapshot({
						url: oCanvas.toDataURL("image/png")
					});
				}
			}
		},
		
		/**
		 *@memberOf ynstestcamera.ywatestcamera.personalcontroller.Camera
		 * @param {object} oEvent for
		 */
		_onSubmitRecord: function (oEvent) {
			//This code was generated by the layout editor.
			var oi18n		= this.getModel("i18n").getResourceBundle();
			var oButton		= this.getAggregation("buttonRecord");
			var oButton2	= this.getAggregation("buttonStopRecord");
			oButton2.setVisible(true);
			switch (oButton.getText()) {
				case oi18n.getText("textButtonStartRecord"):
					oButton.setIcon("sap-icon://pause");
					oButton.setText(oi18n.getText("textButtonPauseRecord"));
					this._onStartRecord(oEvent);
					break;
				case oi18n.getText("textButtonPauseRecord"):
					oButton.setIcon("sap-icon://record");
					if (oButton2.getEnabled()) {
						oButton.setText(oi18n.getText("textButtonRestarRecord"));
					} else {
						oButton.setText(oi18n.getText("textButtonStartRecord"));
					}
					this._onPauseRecord(oEvent);
					break;
				case oi18n.getText("textButtonRestarRecord"):
					oButton.setIcon("sap-icon://pause");
					oButton.setText(oi18n.getText("textButtonPauseRecord"));
					this._onRestarRecord(oEvent);
					break;
				default:
			}
			oButton2.setEnabled(true);
		},
		
		/**
		 *@memberOf ynstestcamera.ywatestcamera.personalcontroller.Camera
		 * @param {object} oEvent for
		 */
		_onSubmitStopRecord: function (oEvent) {
			//This code was generated by the layout editor.
			var oi18n		= this.getModel("i18n").getResourceBundle();
			var oButton		= this.getAggregation("buttonRecord");
			var oButton2	= this.getAggregation("buttonStopRecord");
			oButton.setText(oi18n.getText("textButtonStartRecord"));
			oButton.setIcon("sap-icon://record");
			oButton2.setEnabled(false);
			this._onStopRecord(oEvent);
		},
		
		/**
		 * @memberOf ynstestcamera.ywatestcamera.personalcontroller.Camera
		 * @returns {object} Code of severity.
		 */
		_getVideo: function () {
			//This code was generated by the layout editor.
			var that = this;
			var oVideo = jQuery("video", jQuery("#" + this.getId())).get(0);
			if (this.getUrlvideo() && oVideo) {
				oVideo.src = this.getUrlvideo();
			}
			var fonClick = function () {
				if (!that.getUrlvideo()) {
					that._onSubmitTakePicture();
				}
				//that._onMouseUpTakePicture();
			};
			/*var fonmousedown = function () {
				that._onSubmitTakePicture();
			};*/
			//Attach a click handler to the video element
			if (oVideo && !oVideo.onclick) {
				oVideo.onclick = fonClick;
			}
			/*if (oVideo && !oVideo.onmousedown) {
				oVideo.onmousedown = fonmousedown;
			}*/
			var fplay = function () {
				var fnInterval = function () {
					if ((!that.getVideoWidth() || that.getVideoWidth() === "0px" ) 
						&& oVideo.videoWidth && oVideo.videoWidth !== 0) {
							
						var iVideoWidth = parseInt(that.getVideoWidth(), 10);
						if (oVideo.videoWidth !== iVideoWidth) {
							that.setVideoWidth(oVideo.videoWidth + "px");
							clearInterval(fnInterval);
						}
					}
					if ((!that.getVideoHeight() || that.getVideoHeight() === "0px") 
						&& oVideo.videoHeight && oVideo.videoHeight !== 0) {
							
						var iVideoHeight = parseInt(that.getVideoHeight(), 10);
						if (oVideo.videoHeight !== iVideoHeight) {
							that.setVideoHeight(oVideo.videoHeight + "px");
							clearInterval(fnInterval);
						}
					}
				};
				setInterval(fnInterval, 100);
			};
			if (oVideo) {
				oVideo.addEventListener("play", fplay, false );
			}
			return oVideo;
		},
		
		/**
		 * @memberOf ynstestcamera.ywatestcamera.personalcontroller.Camera
		 * @returns {object} Code of severity.
		 */
		_getCanvas: function () {
			//This code was generated by the layout editor.
			var oCanvas = jQuery("canvas", jQuery("#" + this.getId())).get(0);
			return oCanvas;
		},
		
		_fnDeviceStop1: function (oObject) {
			oObject.stop();
			if (this.oStream) {
				this.oStream = undefined;
				delete this.oStream;
			}
		},
		
		_fnDeviceStop2: function (oObject) {
			oObject.stop();
			if (this.oVideo) {
				if (this.oVideo.srcObject) {
					this.oVideo.srcObject = null;
					delete this.oVideo.srcObject;
				}
				this.oVideo = undefined;
				delete this.oVideo;
			}
		},
		
		/**
		 *@memberOf ynstestcamera.ywatestcamera.personalcontroller.Camera
		 */
		_onStopCamera: function () {
			//This code was generated by the layout editor.
			var that = this;
			var bProccess = false;
			this.setDeviceId("");
			var fstop = function (oObject) {
				oObject.stop();
				if (that.aDevices.length > 0) {
					that.aDevices[0] = undefined;
					that.aDevices.shift();
				}
			};
			if (!this._displayingVideo) {
				return;
			}
			this._displayingVideo = false;
			if (this.oStream) {
				this.oStream.getTracks().forEach(this._fnDeviceStop1.bind(this)); //audio & video
			}
			if (this.oVideo) {
				if (this.oVideo.srcObject) {
					this.oVideo.srcObject.getTracks().forEach(this._fnDeviceStop2.bind(this)); //audio & video
				}
			}
			if (this.oMediaRecorder) {
				this.oMediaRecorder = undefined;
				delete this.oMediaRecorder;
			}
			if (bProccess) {
				while (this.aDevices.length > 0) {
					this.aDevices[0].getTracks().forEach(fstop);
				}
				this.aDevices = [];
			}
		},
		
		/*_onMouseUpTakePicture: function (oEvent) {
			//This code was generated by the layout editor.
			this.fireSnapshot({
				url: ""
			});
		},*/
		
		/**
		 *@memberOf ynstestcamera.ywatestcamera.personalcontroller.Camera
		 */
		_onStartCamera: function () {
			//This code was generated by the layout editor.
			var that = this;
			var bCompact = false;
			var aDevices = [];
			var aDevicesCam = [];
			var aDevicesCamFinal = [];
			var oi18n = this.getModel("i18n").getResourceBundle();
			if (this.getDeviceId() === undefined || this.getDeviceId() === null) {
				this.setDeviceId("");
			}
			var oContrainDevices = {
				audio: true,
				video: {
					facingMode: "",	//"user"(Enfoca al usuario), "environment"(Enfoca opuesto al usuario)
					deviceId: this.getDeviceId()
				}
			};
			this.oVideo = this._getVideo();
			if (!this.getDisplay() || this.getUrlvideo()) {
				return;
			}
			if (this._displayingVideo) {
				return;
			}
			
			var fPlayVideo = function (oStream) {
				// We have a camera. Let's store the stream for later use
				if (!that._displayingVideo && "srcObject" in that.oVideo) {
					that.aDevices.push(oStream);
					that.oStream = oStream;
					that.oVideo.srcObject = oStream;
					that.oVideo.play();
					that.oVideo.muted = true;
					that._displayingVideo = true;
					that.oMediaRecorder = new MediaRecorder(oStream);
					that.chunks = [];
				}
			};
			
			var fCathError = function (sError) {
				var sErrorMessage = oi18n.getText("textErrorAccessCamera") + ": " + sError;
				MessageBox.error(sErrorMessage, {
					styleClass: bCompact ? "sapUiSizeCompact" : ""
				});
			};
			
			var fConfirmWebCam = function (sAction) {
				for (var i = 0; i < aDevicesCam.length; i++) {
					if (aDevicesCam[i].label === sAction) {
						// Invoca WebCam (ir la función fPlayVideo)
						oContrainDevices.video.deviceId = aDevicesCamFinal[i].deviceId;
						that.setDeviceId(oContrainDevices.video.deviceId);
						navigator.mediaDevices
							.getUserMedia(oContrainDevices)
							.then(fPlayVideo)
							.catch(fCathError);
						break;
					}
				}
			};

			var filterDeviceCam = function (mDevice) {
				return mDevice.kind === "videoinput";
			};

			var fgetdevices = function (aDevicestotal) {
				// Se filtran los dispositivos que son WebCam (ir a la función filterDeviceCam)
				aDevicesCamFinal = aDevicestotal.filter(filterDeviceCam);
				if (aDevicesCamFinal.length === 0) {
					var sException = "aDevicesCamFinal.length === 0";
					throw sException;
				}
				for (var i = 0; i < aDevicesCamFinal.length; i++) {
					var mDeviceCam = {
						deviceId: aDevicesCamFinal[i].deviceId,
						groupId: aDevicesCamFinal[i].groupId,
						kind: aDevicesCamFinal[i].kind,
						label: aDevicesCamFinal[i].label
					};
					if (!mDeviceCam.label) {
						mDeviceCam.label = "WebCam[" + (i + 1) + "]";
					}
					aDevicesCam.push(mDeviceCam);
					aDevices.push(mDeviceCam.label);
				}
				if (that.getDeviceId()) {
					oContrainDevices.video.deviceId = that.getDeviceId();
					navigator.mediaDevices
						.getUserMedia(oContrainDevices)
						.then(fPlayVideo)
						.catch(fCathError);
				} else {
					// Genera mensaje de confirmación (ir a la función fConfirmWebCam)
					MessageBox.confirm(oi18n.getText("textConfirmWebcam"), {
						actions: aDevices,
						onClose: fConfirmWebCam
					});
				}	
			};
			
			if (this.oVideo && !this._displayingVideo) {
				//sap.ui.Device.getUserMedia({
				//Obtiene los devices totales audio, video, etc. (ir a la función fgetdevices)
				navigator.mediaDevices
					.enumerateDevices()
					.then(fgetdevices)
					.catch(fCathError);
			}
		},
		
		/**
		 *@memberOf ynstestcamera.ywatestcamera.personalcontroller.Camera
		 * @param {object} oEvent for
		 */
		_onStartRecord: function (oEvent) {
			//This code was generated by the layout editor.
			if (this.oMediaRecorder) {
				this.oMediaRecorder.start();
			}
		},
		
		/**
		 *@memberOf ynstestcamera.ywatestcamera.personalcontroller.Camera
		 * @param {object} oEvent for
		 */
		_onPauseRecord: function (oEvent) {
			//This code was generated by the layout editor.
			if (this.oMediaRecorder) {
				this.oMediaRecorder.pause();
			}
		},
		
		/**
		 *@memberOf ynstestcamera.ywatestcamera.personalcontroller.Camera
		 * @param {object} oEvent for
		 */
		_onRestarRecord: function (oEvent) {
			//This code was generated by the layout editor.
			if (this.oMediaRecorder) {
				this.oMediaRecorder.resume();
			}
		},
		
		/**
		 *@memberOf ynstestcamera.ywatestcamera.personalcontroller.Camera
		 * @param {object} oEvent for
		 */
		_onStopRecord: function (oEvent) {
			//This code was generated by the layout editor.
			var that = this;
			if (this.oMediaRecorder) {
				this.oMediaRecorder.stop();
				// Se activa cuando se termina de grabar un video
				this.oMediaRecorder.ondataavailable = function (oEvent2) {
					that.chunks.push(oEvent2.data);
					var blob = new Blob(that.chunks, { "type" : "video/mp4;" });
					that.chunks = [];
					var videoURL = window.URL.createObjectURL(blob);
					that.fireSnapshot({
						videourl: videoURL
					});
				};
			}
		},
		
		/**
		 *@memberOf ynstestcamera.ywatestcamera.personalcontroller.Camera
		 * @param {object} oRm for
		 * @param {object} oControl for
		 */
		renderer: function (oRm, oControl) {
			//This code was generated by the layout editor.
			var sControlVideo = "<video ";
			if (oControl.getUrlvideo()) {
				oControl.setDisplay(false);
				oControl.setDeviceId("");
				sControlVideo += "controls ";
			}
			var iVideoWidth = parseInt(oControl.getVideoWidth(), 10);
			var iVideoHeight = parseInt(oControl.getVideoHeight(), 10);
			sControlVideo += "width='%w' height='%h' style='width: %pw; height: %phpx;'";
			sControlVideo	.replace("%w", iVideoWidth)
							.replace("%h", iVideoHeight)
							.replace("%pw", oControl.getVideoWidth())
							.replace("%ph", oControl.getVideoHeight());
			var sVideo = sControlVideo + "class='sapUiResponsiveMargin " //margin of video
				//border color of video (plomo oscuro por defecto)
				+ "sapThemeBrand-asColor " //border color of video (azul claro)
				//+ "sapThemeHighlight-asColor "			//border color of video (azul claro)
				//+ "sapThemeBrand-asBackgroundColor "		//background of video (azul claro)
				//+ "sapThemeHighlight-asBackgroundColor "	//background of video (azul claro)
				//+ "sapThemeText-asBackgroundColor "		//background of video (plomo oscuro)
				+ "cameraCSSStyle" //border radius of video
				+ "'/>";
			//var sCanvas = "<canvas style='display: none;'/>";
			var sCanvas = "<canvas width='%w' height='%h' style='display: none; width: %pw; height: %ph;'/>";
			sCanvas	.replace("%w", iVideoWidth)
					.replace("%h", iVideoHeight)
					.replace("%pw", oControl.getVideoWidth())
					.replace("%ph", oControl.getVideoHeight());
			oRm.openStart("div", oControl);
			oRm.class("cameraCSSStyle2");
			oRm.class("sapUiResponsiveMargin");
			oRm.openEnd();
			oRm.write(sVideo);
			oRm.write(sCanvas);
			oRm.write("<br/>");
			if (!oControl.getUrlvideo()) {
				//oRm.renderControl(oControl.getAggregation("buttonCaptureMode"));
				oRm.renderControl(oControl.getAggregation("buttonAccessCamera"));
				oRm.renderControl(oControl.getAggregation("buttonTakePicture"));
				oRm.renderControl(oControl.getAggregation("buttonRecord"));
				oRm.renderControl(oControl.getAggregation("buttonStopRecord"));
			}
			oRm.close("div");
		},
		
		/**
		 *@memberOf ynstestcamera.ywatestcamera.personalcontroller.Camera
		 */
		onAfterRendering: function () {
			//This code was generated by the layout editor.
			this._displayingVideo = false;
			if (this.oStream) {
				this.oStream.getTracks().forEach(this._fnDeviceStop1.bind(this));
			}
			if (this.oVideo) {
				if (this.oVideo.srcObject) {
					this.oVideo.srcObject.getTracks().forEach(this._fnDeviceStop2.bind(this));
				}
			}
			this._onStartCamera();
		}
	});
	return CControl;
});